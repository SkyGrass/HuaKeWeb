<%@ Master Language="C#" AutoEventWireup="true" CodeBehind="Site1.master.cs" Inherits="HuakeWeb.Pages.Master.Site1" %>

<!DOCTYPE html>

<html>
<head runat="server">
    <meta charset="utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />
    <meta name="viewport"
        content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no,viewport-fit:cover" />
    <link rel="stylesheet" href="../../Content/Css/index.css" />
    <script src="../../Content/Js/jweixin-1.6.0.js"></script>
    <script src="../../Content/Js/vue.min.js"></script>
    <script src="../../Content/Js/vant.min.js"></script>
    <script src="../../Content/Js/fly.min.js"></script>
    <script src="../../Content/Js/dayjs.min.js"></script>
    <script src="../../Content/Js/conversion.js"></script>
    <asp:ContentPlaceHolder ID="head" runat="server">
    </asp:ContentPlaceHolder>
    <style>
        #root {
            width: 100vw;
            height: 100vh;
            margin: 0;
            background: #f6f6f6;
        }

        body html {
            font-size: 20px;
        }
    </style>
</head>
<body>
    <script>
        var vm = new Vue({ el: "#root" })
        fly.config.timeout = 60 * 1000;
        fly.config.baseURL = "../handle/";
        //添加请求拦截器
        fly.interceptors.request.use((request) => {
            vm.$toast.loading({ duration: 0, message: '加载中...', forbidClick: true });
            return request;
        })

        //添加响应拦截器，响应拦截器会在then/catch处理之前执行
        fly.interceptors.response.use(
            (response) => {
                const { msg, state } = response.data
                vm.$toast.clear();
                if (state == 'expired') {
                    vm.$dialog.alert({ title: '提示', message: msg });
                } else {
                    return response.data;
                }
            },
            (err) => {
                vm.$toast.clear();
                vm.$dialog.alert({ title: '提示', message: '网络发生错误' })
                //return Promise.resolve("ssss")
            }
        )

        const sendPost = (url, data, timeout) => {
            if (timeout) fly.config.timeout = timeout;
            return fly.post(url, data);
        }

        const sendGet = (url, param) => {
            return fly.get(url, param);
        }

        const getQueryParams = (url) => {
            // 使用正则表达式提取URL参数
            let queryParams = {};
            let urlToParse = url || window.location.href;
            let questionMarkIndex = urlToParse.indexOf("?");
            if (questionMarkIndex !== -1) {
                let queryString = urlToParse.substring(questionMarkIndex + 1);
                let vars = queryString.split("&");
                for (let i = 0; i < vars.length; i++) {
                    let pair = vars[i].split("=");
                    let key = decodeURIComponent(pair[0]);
                    let value = decodeURIComponent(pair[1]);
                    // 如果存在参数值则解析为正确的类型
                    if (typeof queryParams[key] === "undefined") {
                        queryParams[key] = value;
                    } else if (Array.isArray(queryParams[key])) {
                        queryParams[key].push(value);
                    } else {
                        queryParams[key] = [queryParams[key], value];
                    }
                }
            }
            return queryParams;
        }
    </script>
    <div id="root">
        <asp:ContentPlaceHolder ID="ContentPlaceHolder1" runat="server">
        </asp:ContentPlaceHolder>
    </div>

</body>
</html>
